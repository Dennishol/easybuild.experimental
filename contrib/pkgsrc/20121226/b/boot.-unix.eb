# This file is an EasyBuild recipy as per https://github.com/hpcugent/easybuild
#
# It has been automatically produced by /home/users/fgeorgatos/arena/pkg2eb/pkg2eb_v4.sh ;
# ie. there is no warranty, provided AS-IS, the known yada yada, etc
#  
#  #######                     ######                                    ### 
#  #         ##    ####  #   # #     # #    # # #      #####     # ##### ### 
#  #        #  #  #       # #  #     # #    # # #      #    #    #   #   ### 
#  #####   #    #  ####    #   ######  #    # # #      #    #    #   #    #  
#  #       ######      #   #   #     # #    # # #      #    #    #   #       
#  #       #    # #    #   #   #     # #    # # #      #    #    #   #   ### 
#  ####### #    #  ####    #   ######   ####  # ###### #####     #   #   ###
#  
# Copyright:: Copyright (c) 2012 University of Luxembourg / LCSB
# Author::    Fotis Georgatos <fotis.georgatos@uni.lu>
# License::   MIT/GPL
#
# File::      boot.-unix.eb
# Date::      Wed Dec 26 17:08:41 CET 2012

# The following values are best-guess, which may have to be further overriden on
name = 'smlnj-'
version = 'unix'
versionsuffix = '-20121226'

description = "boot.-unix: Popular functional language from Bell Labs"

# The following are automatically calculated - cross fingers
sources = ['boot.${BOX}-unix.tar.gz']
version = '${SML_VERSION}'
name = 'smlnj'
source_urls = ['http://smlnj.cs.uchicago.edu/dist/working/${SML_VERSION}/']
homepage = 'http://www.smlnj.org/index.html'

toolchain = {'name': 'goalf', 'version': '1.1.0-no-OFED'}

sanity_check_paths = {
                      'files': [],
                      'dirs': ['.'] # fixme when the compilation is successful
                     }

parallel = 1 	# this is a conservative choice
maxparallel = 1 # this is a conservative choice

moduleclass = 'base'

###### The appended information is simply the pkgsrc sourcefile: /home/users/fgeorgatos/arena/pkg2eb/pkgsrc/lang/smlnj/Makefile ######
# # $NetBSD: Makefile,v 1.23 2012/01/29 20:48:48 asau Exp $
# #
# 
# DISTNAME=	boot.${BOX}-unix
# PKGNAME=	smlnj-${SML_VERSION}
# CATEGORIES=	lang
# MASTER_SITES=	http://smlnj.cs.uchicago.edu/dist/working/${SML_VERSION}/
# DISTFILES=	MLRISC.tgz			\
# 		boot.${BOX}-unix.tgz		\
# 		ckit.tgz			\
# 		cm.tgz				\
# 		cml.tgz				\
# 		compiler.tgz			\
# 		config.tgz			\
# 		eXene.tgz			\
# 		ml-burg.tgz			\
# 		ml-lex.tgz			\
# 		nlffi.tgz			\
# 		ml-yacc.tgz			\
# 		runtime.tgz			\
# 		smlnj-lib.tgz			\
# 		system.tgz			\
# 		ml-lpt.tgz			\
# 		pgraph.tgz			\
# 		trace-debug-profile.tgz		\
# 		heap2asm.tgz			\
# 		smlnj-c.tgz
# 
# MAINTAINER=	richards+netbsd@CS.Princeton.EDU
# HOMEPAGE=	http://www.smlnj.org/index.html
# COMMENT=	Popular functional language from Bell Labs
# 
# SML_VERSION=	110.73
# 
# PKG_DESTDIR_SUPPORT=	user-destdir
# 
# WRKSRC=		${WRKDIR}
# DIST_SUBDIR=	smlnj-${SML_VERSION}
# USE_TOOLS+=	gmake pax
# 
# # previous versions of the package had an additional '-'
# CONFLICTS=	sml-nj-[0-9]*
# 
# SML_BASE=	${PREFIX}/lib/smlnj
# SML_LIBDIR=	${SML_BASE}/lib
# SML_BINDIR=	${SML_BASE}/bin
# SML_SCRIPTS=	_link-sml _run-sml _ml-build _ml-makedepend
# 
# .include "../../lang/smlnj/Makefile.common"
# 
# # create parent directory for the runtime system
# pre-extract:
# 	${MKDIR} ${WRKDIR}/src || ${TRUE}
# 
# # make it easier to patch the runtime system
# do-extract:
# 	${RUN} extract_file="${_DISTDIR}/config.tgz"; export extract_file;	\
# 		cd ${WRKDIR}; ${EXTRACT_CMD}
# 	${RUN} extract_file="${_DISTDIR}/runtime.tgz"; export extract_file;	\
# 		cd ${WRKDIR}/src; ${EXTRACT_CMD}
# 	${RUN} extract_file="${_DISTDIR}/runtime.tgz"; export extract_file;	\
# 		mkdir ${WRKDIR}/base; cd ${WRKDIR}/base; ${EXTRACT_CMD}
# 
# # make symlinks to the dist files
# post-extract:
# 	cd ${WRKDIR} && ${LN} -sf ${_DISTDIR}/*  .
# 
# # resolve definition of SML_BASE, CFLAGS in patched files
# do-configure:
# 	if [ ${MACHINE_ARCH} = "powerpc" ]; then		\
# 		${AWK} '(! /^request nlffi$$/) { print }' \
# 		< ${WRKDIR}/config/targets			\
# 		> ${WRKDIR}/temp;				\
# 		${MV} ${WRKDIR}/temp ${WRKDIR}/config/targets;	\
# 	fi
# 	cd ${WRKDIR}/config;				\
# 	for f in ${SML_SCRIPTS}; do			\
# 		${CP} "$${f}" "$${f}.tmp";		\
# 		${SED} -e 's|@SML_BASE@|${SML_BASE}|g'	\
# 			< "$${f}.tmp" > "$${f}";	\
# 	done;						\
# 	cd ${WRKDIR}/src/runtime/objs;			\
# 	for f in *; do					\
# 		${CP} "$${f}" "$${f}.tmp";		\
# 		${SED} -e 's|@CFLAGS@|${CFLAGS}|g'	\
# 			< "$${f}.tmp" > "$${f}";	\
# 	done
# 
# # The build target needs to run $WRKDIR/config/install.sh
# do-build:
# 	cd ${WRKDIR} && unset PWD && \
# 	FILESDIR="${FILESDIR}" PATCH="${PATCH}" PATCH_ARGS="${PATCH_ARGS}" \
# 		SMLNJ_HOME="${WRKDIR}" ./config/install.sh
# 
# # install target
# # (see ftp://ftp.research.bell-labs.com/dist/smlnj/working/110.38/INSTALL)
# # 1. create installation directories
# # 2. copy the ./bin and ./lib directories across
# # 3. install links to executables in $PREFIX/bin
# INSTALLATION_DIRS=	bin
# do-install:
# 	${INSTALL_DATA_DIR} ${DESTDIR}${SML_BASE}
# 	cd ${WRKDIR} && pax -rw -pam bin lib ${DESTDIR}${SML_BASE}
# 	cd ${DESTDIR}${PREFIX}/bin && ${LN} -sf ../lib/smlnj/bin/* .
# 
# .include "../../mk/bsd.pkg.mk"

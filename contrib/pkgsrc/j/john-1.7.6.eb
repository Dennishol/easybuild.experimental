# This file is an EasyBuild recipy as per https://github.com/hpcugent/easybuild
# It has been automatically produced by /home/users/fgeorgatos/arena/pkg2eb/pkg2eb_v2.sh ; ie. there is no warranty, given AS-IS, etc
#  
#  #######                     ######                                    ### 
#  #         ##    ####  #   # #     # #    # # #      #####     # ##### ### 
#  #        #  #  #       # #  #     # #    # # #      #    #    #   #   ### 
#  #####   #    #  ####    #   ######  #    # # #      #    #    #   #    #  
#  #       ######      #   #   #     # #    # # #      #    #    #   #       
#  #       #    # #    #   #   #     # #    # # #      #    #    #   #   ### 
#  ####### #    #  ####    #   ######   ####  # ###### #####     #   #   ###
#  
# Copyright:: Copyright (c) 2012 University of Luxembourg / LCSB
# Author::    Fotis Georgatos <fotis.georgatos@uni.lu>
# License::   MIT/GPL
# File::      john-1.7.6.eb
# Date::      Fri Nov  9 14:37:48 CET 2012

# The following values are best-guess, which may be further overriden on
name = 'john'
version = '1.7.6'
versionsuffix = '-2012-11-09'

# The following are automatically calculated - cross fingers
sources = ['john-1.7.6.tar.gz']
source_urls = ['http://www.openwall.com/john/g/']
homepage = 'http://www.openwall.com/john/'

toolchain = {'name': 'goalf', 'version': '1.1.0-no-OFED'}
toolchainopts = {'optarch': True, 'pic': True}

# This has eventually to be amended with the real values of files/directories, as needed on a per package basis
# Such incomplete easyconfigs are OK for repo https://github.com/fgeorgatos/easybuild.experimental but not for production EasyBuild
# In case you decide to commit/push your experimental easyconfigs, remember to place them under users/

sanity_check_paths = {
                  'files': [],
                  'dirs': ['.']
                 }

description = "john-1.7.6 description: Unix_Password_Cracker"

# we play conservative in compilation parallelism, to maximize chances of success on the compilation step

parallel = 1 
maxparallel = 1 

moduleclass = 'base'


# # $NetBSD: Makefile,v 1.21 2012/10/23 18:16:31 asau Exp $
# #
# 
# DISTNAME=	john-1.7.6
# PKGREVISION=	1
# CATEGORIES=	security textproc
# MASTER_SITES=	http://www.openwall.com/john/g/
# 
# MAINTAINER=	pkgsrc-users@NetBSD.org
# HOMEPAGE=	http://www.openwall.com/john/
# COMMENT=	Unix Password Cracker
# LICENSE=	gnu-gpl-v2
# 
# NO_CONFIGURE=	yes
# BUILD_DIRS=	src
# TEST_TARGET=	check
# 
# .include "../../mk/compiler.mk"
# .include "../../mk/bsd.prefs.mk"
# 
# .if ${OPSYS} == "SunOS" && ${MACHINE_ARCH} == "sparc"
# .  if !empty(CC_VERSION:MSun)
# .    if defined(SPARC_TARGET_ARCH) && ${SPARC_TARGET_ARCH} == "sparcv9"
# BUILD_TARGET=	solaris-sparc-v9-cc
# .    else
# BUILD_TARGET=	solaris-sparc-v8-cc
# .    endif
# .  else
# BUILD_TARGET=	solaris-sparc-gcc
# .  endif
# .elif ${OPSYS} == "SunOS" && ${MACHINE_ARCH} == "i386"
# BUILD_TARGET=	solaris-x86-any
# .elif ${OPSYS} == "NetBSD"
# .  if ${MACHINE_ARCH} == "i386"
# BUILD_TARGET=	openbsd-x86-any
# .  elif ${MACHINE_ARCH} == "x86_64"
# BUILD_TARGET=	openbsd-x86-64
# .  elif ${MACHINE_ARCH} == "sparc64"
# BUILD_TARGET=	netbsd-sparc64
# .  elif ${MACHINE_ARCH} == "sparc"
# BUILD_TARGET=	openbsd-sparc
# .  elif ${MACHINE_ARCH} == "alpha"
# BUILD_TARGET=	openbsd-alpha
# .  elif ${MACHINE_ARCH} == "powerpc"
# BUILD_TARGET=	openbsd-ppc32
# .  elif ${MACHINE_ARCH} == "powerpc64"
# BUILD_TARGET=	openbsd-ppc64
# .  elif ${MACHINE_ARCH} == "vax"
# BUILD_TARGET=	netbsd-vax
# .  else
# BUILD_TARGET=	generic
# .  endif
# .elif ${OPSYS} == "OpenBSD"
# .  if ${MACHINE_ARCH} == "i386"
# BUILD_TARGET=	openbsd-x86-any
# .  elif ${MACHINE_ARCH} == "x86_64"
# BUILD_TARGET=	openbsd-x86-64
# .  elif ${MACHINE_ARCH} == "sparc64"
# BUILD_TARGET=	openbsd-sparc64
# .  elif ${MACHINE_ARCH} == "sparc"
# BUILD_TARGET=	openbsd-sparc
# .  elif ${MACHINE_ARCH} == "alpha"
# BUILD_TARGET=	openbsd-alpha
# .  elif ${MACHINE_ARCH} == "powerpc"
# BUILD_TARGET=	openbsd-ppc32
# .  elif ${MACHINE_ARCH} == "powerpc64"
# BUILD_TARGET=	openbsd-ppc64
# .  else
# BUILD_TARGET=	generic
# .  endif
# .else
# BUILD_TARGET=	generic
# .endif
# 
# INSTALLATION_DIRS=	bin share/john
# 
# SUBST_CLASSES+=		john
# SUBST_STAGE.john=	pre-build
# SUBST_FILES.john=	src/params.h
# SUBST_SED.john=		-e "s+@PREFIX@+${PREFIX}+g"
# 
# do-install:
# 	# programs and scripts
# 	${INSTALL_PROGRAM} ${WRKSRC}/run/john ${DESTDIR}${PREFIX}/bin
# 	${INSTALL_SCRIPT} ${WRKSRC}/run/mailer ${DESTDIR}${PREFIX}/bin
# 	# configuration file
# 	${INSTALL_DATA} ${WRKSRC}/run/john.conf ${DESTDIR}${PREFIX}/share/john
# 	# symbolic links
# .for i in unafs unique unshadow
# 	${LN} -sf john ${DESTDIR}${PREFIX}/bin/${i}
# .endfor
# 	# data files
# .for i in all.chr alnum.chr alpha.chr digits.chr lanman.chr password.lst
# 	${INSTALL_DATA} ${WRKSRC}/run/${i} ${DESTDIR}${PREFIX}/share/john
# .endfor
# 
# .include "../../mk/bsd.pkg.mk"

# This file is an EasyBuild recipy as per https://github.com/hpcugent/easybuild
# It has been automatically produced by /home/users/fgeorgatos/arena/pkg2eb/pkg2eb_v2.sh ; ie. there is no warranty, given AS-IS, etc
#  
#  #######                     ######                                    ### 
#  #         ##    ####  #   # #     # #    # # #      #####     # ##### ### 
#  #        #  #  #       # #  #     # #    # # #      #    #    #   #   ### 
#  #####   #    #  ####    #   ######  #    # # #      #    #    #   #    #  
#  #       ######      #   #   #     # #    # # #      #    #    #   #       
#  #       #    # #    #   #   #     # #    # # #      #    #    #   #   ### 
#  ####### #    #  ####    #   ######   ####  # ###### #####     #   #   ###
#  
# Copyright:: Copyright (c) 2012 University of Luxembourg / LCSB
# Author::    Fotis Georgatos <fotis.georgatos@uni.lu>
# License::   MIT/GPL
# File::      snes9x--src.eb
# Date::      Fri Nov  9 14:37:14 CET 2012

# The following values are best-guess, which may be further overriden on
name = 'snes9x-'
version = '-src'
versionsuffix = '-2012-11-09'

# The following are automatically calculated - cross fingers
sources = ['snes9x-${SNESVER}-src.tar.gz']
version = '${SNESVER}'
name = 'snes9x'
source_urls = ['http://www.lysator.liu.se/snes9x/${SNESVER}/']
homepage = 'http://www.snes9x.com/'

toolchain = {'name': 'goalf', 'version': '1.1.0-no-OFED'}
toolchainopts = {'optarch': True, 'pic': True}

# This has eventually to be amended with the real values of files/directories, as needed on a per package basis
# Such incomplete easyconfigs are OK for repo https://github.com/fgeorgatos/easybuild.experimental but not for production EasyBuild
# In case you decide to commit/push your experimental easyconfigs, remember to place them under users/

sanity_check_paths = {
                  'files': [],
                  'dirs': ['.']
                 }

description = "snes9x--src description: Super_Nintendo_Entertainment_System__SNES__emulator"

# we play conservative in compilation parallelism, to maximize chances of success on the compilation step

parallel = 1 
maxparallel = 1 

moduleclass = 'base'


# # $NetBSD: Makefile,v 1.50 2012/10/23 10:24:04 wiz Exp $
# 
# SNESVER=		1.43
# DISTNAME=		snes9x-${SNESVER}-src
# PKGNAME=		snes9x-${SNESVER}
# CATEGORIES=		emulators
# MASTER_SITES=		http://www.lysator.liu.se/snes9x/${SNESVER}/ \
# 			http://files.ipherswipsite.com/snes9x/
# 
# MAINTAINER=		pkgsrc-users@NetBSD.org
# HOMEPAGE=		http://www.snes9x.com/
# COMMENT=		Super Nintendo Entertainment System (SNES) emulator
# 
# NOT_FOR_PLATFORM=	${LP64PLATFORMS}
# MAKE_JOBS_SAFE=		no
# 
# WRKSRC=			${WRKDIR}/${DISTNAME}/snes9x
# USE_LANGUAGES=		c c++
# USE_TOOLS+=		gmake
# PTHREAD_OPTS+=		require
# INSTALLATION_DIRS=	bin
# GNU_CONFIGURE=		YES
# 
# SUBST_CLASSES+=		nodos
# SUBST_STAGE.nodos=	pre-patch
# SUBST_FILES.nodos=	../language.h
# SUBST_FILES.nodos+=	../readme.txt dsp1.h dsp3emu.cpp dsp4emu.cpp
# SUBST_FILTER_CMD.nodos=	env -i ${TR} -d '\r'
# 
# SUBST_CLASSES+=		paircpp
# SUBST_STAGE.paircpp=	pre-patch
# SUBST_FILES.paircpp=	65c816.h sa1.h
# SUBST_SED.paircpp=	-e 's|pair|snes9x_pair|g'
# 
# do-install:
# 	${INSTALL_PROGRAM} ${WRKSRC}/snes9x ${DESTDIR}${PREFIX}/bin
# 	${INSTALL_PROGRAM} ${WRKSRC}/offsets ${DESTDIR}${PREFIX}/bin
# 	${INSTALL_DATA_DIR} ${DESTDIR}${PREFIX}/share/doc/snes9x
# 	${INSTALL_MAN} ${WRKSRC}/doc/porting.txt \
# 		${DESTDIR}${PREFIX}/share/doc/snes9x
# 	${INSTALL_MAN} ${WRKSRC}/changes.txt \
# 		${DESTDIR}${PREFIX}/share/doc/snes9x
# 	${INSTALL_MAN} ${WRKSRC}/hardware.txt \
# 		${DESTDIR}${PREFIX}/share/doc/snes9x
# 	${INSTALL_MAN} ${WRKSRC}/problems.txt \
# 		${DESTDIR}${PREFIX}/share/doc/snes9x
# 	${INSTALL_MAN} ${WRKDIR}/${DISTNAME}/readme.txt \
# 		${DESTDIR}${PREFIX}/share/doc/snes9x
# 	${INSTALL_MAN} ${WRKDIR}/${DISTNAME}/readme.unix \
# 		${DESTDIR}${PREFIX}/share/doc/snes9x
# 
# .include "../../mk/bsd.prefs.mk"
# 
# PKG_OPTIONS_VAR=	PKG_OPTIONS.snes9x
# PKG_SUPPORTED_OPTIONS=	# empty
# .if ${MACHINE_ARCH} == "i386"
# BUILD_DEPENDS+=		nasm>=0.98:../../devel/nasm
# PKG_SUPPORTED_OPTIONS+=	mmx
# .endif
# 
# .include "../../mk/bsd.options.mk"
# 
# .if ${MACHINE_ARCH} == "i386"
# CONFIGURE_ARGS+=	--with-assembler
# .  if !empty(PKG_OPTIONS:Mmmx)
# CONFIGURE_ARGS+=	--with-mmx
# .  endif
# .  if ${OBJECT_FMT} == "a.out"
# MAKE_ENV+=	FILEFORMAT=aoutb
# MAKE_ENV+=	_ASM_UNDERBARS=1
# .  else
# MAKE_ENV+=	FILEFORMAT=elf
# .  endif
# .endif
# 
# .if exists(${X11BASE}/lib/libXxf86dga.a) || ${X11_TYPE} != "native"
# CONFIGURE_ARGS+=	--with-extensions
# .endif
# 
# .if exists(/usr/include/usb.h) || exists(/usr/include/usbhid.h)
# MAKE_ENV+=	USBJOY=1
# .  if exists(/usr/include/usbhid.h)
# MAKE_ENV+=	USBHID_H=1
# .  endif
# .endif
# 
# BUILDLINK_DEPMETHOD.libXt?=	build
# 
# .include "../../devel/zlib/buildlink3.mk"
# .include "../../x11/libX11/buildlink3.mk"
# .include "../../x11/libXext/buildlink3.mk"
# .include "../../x11/libXxf86dga/buildlink3.mk"
# .include "../../x11/libXxf86vm/buildlink3.mk"
# .include "../../x11/libXt/buildlink3.mk"
# .include "../../mk/oss.buildlink3.mk"
# .include "../../mk/pthread.buildlink3.mk"
# .include "../../mk/bsd.pkg.mk"

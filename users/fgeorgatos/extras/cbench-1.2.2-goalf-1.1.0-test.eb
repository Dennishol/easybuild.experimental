# Remember to set if needed:
# export CBENCHOME=`pwd`;export CBENCHTEST=`pwd`-test;export MPIHOME=$SOFTROOTOPENMPI;export COMPILERCOLLECTION=gcc

name='Cbench'
version='1.2.2'

homepage='http://sourceforge.net/apps/trac/cbench/'
description="Cbench is a framework for benchmarking, stress-testing, and analyzing Linux-based parallel compute clusters"

toolkit={'name':'GCC','version':'4.6.3'}
#toolkit={'name':'goalf','version':'1.1.0-no-OFED'}
toolkitopts={'pic':True}

#sources=['%s_%s.tar.gz'%(name.lower(), '_'.join(version.split('.')))]
sources=['%s-%s.tar.gz'%(name.lower(), version)]
# https://sourceforge.net/projects/cbench/files/cbench/1.2.2/cbench-1.2.2.tar.gz/download
sourceURLs=[('https://sourceforge.net/projects/%(name)s/files/%(name)s/%(version)s' % {'name':name.lower(),  'version':version}, 'download')]

preconfigopts='/bin/true'
premakeopts='"CBENCHOME=`pwd` CBENCHTEST=`pwd`-test MPIHOME=$SOFTROOTOPENMPI COMPILERCOLLECTION=gcc"'

blaslib='ATLAS'
blasver='3.8.4'

mpilib='OpenMPI'
mpilibver='1.4.5'
mpilibsfx='-no-OFED'
versionsuffix='-%s-%s%s'%(mpilib, mpilibver, mpilibsfx)

dependencies=[(mpilib, mpilibver, mpilibsfx), (blaslib, blasver)]

#dependencies=[(blaslib, blasver)]
versionsuffix='-%s-%s' % (blaslib, blasver)

# supply_blas=True

## disable parallel build, otherwise tests will run in parallel and not complete
parallel=1

moduleclass='lib'

# sanityCheckPaths = {'files': ['lib/libboost_python.so','lib/libboost_system.so'], 'dirs':['include/boost']}
sanityCheckPaths = {'files': [], 'dirs':['.']}
